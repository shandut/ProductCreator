{"ast":null,"code":"function getVisibleAndHiddenActionsIndices(actions = [], groups = [], disclosureWidth, actionsWidths, containerWidth) {\n  const sumTabWidths = actionsWidths.reduce((sum, width) => sum + width, 0);\n  const arrayOfActionsIndices = actions.map((_, index) => {\n    return index;\n  });\n  const arrayOfGroupsIndices = groups.map((_, index) => {\n    return index;\n  });\n  const visibleActions = [];\n  const hiddenActions = [];\n  const visibleGroups = [];\n  const hiddenGroups = [];\n  if (containerWidth > sumTabWidths) {\n    visibleActions.push(...arrayOfActionsIndices);\n    visibleGroups.push(...arrayOfGroupsIndices);\n  } else {\n    let accumulatedWidth = 0;\n    arrayOfActionsIndices.forEach(currentActionsIndex => {\n      const currentActionsWidth = actionsWidths[currentActionsIndex];\n      if (accumulatedWidth + currentActionsWidth >= containerWidth - disclosureWidth) {\n        hiddenActions.push(currentActionsIndex);\n        return;\n      }\n      visibleActions.push(currentActionsIndex);\n      accumulatedWidth += currentActionsWidth;\n    });\n    arrayOfGroupsIndices.forEach(currentGroupsIndex => {\n      const currentActionsWidth = actionsWidths[currentGroupsIndex + actions.length];\n      if (accumulatedWidth + currentActionsWidth >= containerWidth - disclosureWidth) {\n        hiddenGroups.push(currentGroupsIndex);\n        return;\n      }\n      visibleGroups.push(currentGroupsIndex);\n      accumulatedWidth += currentActionsWidth;\n    });\n  }\n  return {\n    visibleActions,\n    hiddenActions,\n    visibleGroups,\n    hiddenGroups\n  };\n}\nexport { getVisibleAndHiddenActionsIndices };","map":{"version":3,"names":["getVisibleAndHiddenActionsIndices","actions","groups","disclosureWidth","actionsWidths","containerWidth","sumTabWidths","reduce","sum","width","arrayOfActionsIndices","map","_","index","arrayOfGroupsIndices","visibleActions","hiddenActions","visibleGroups","hiddenGroups","push","accumulatedWidth","forEach","currentActionsIndex","currentActionsWidth","currentGroupsIndex","length"],"sources":["/Users/shannondutton/Documents/Code Projects/ProductCreator/node_modules/@shopify/polaris/build/esm/components/ActionMenu/components/Actions/utilities.js"],"sourcesContent":["function getVisibleAndHiddenActionsIndices(actions = [], groups = [], disclosureWidth, actionsWidths, containerWidth) {\n  const sumTabWidths = actionsWidths.reduce((sum, width) => sum + width, 0);\n  const arrayOfActionsIndices = actions.map((_, index) => {\n    return index;\n  });\n  const arrayOfGroupsIndices = groups.map((_, index) => {\n    return index;\n  });\n  const visibleActions = [];\n  const hiddenActions = [];\n  const visibleGroups = [];\n  const hiddenGroups = [];\n  if (containerWidth > sumTabWidths) {\n    visibleActions.push(...arrayOfActionsIndices);\n    visibleGroups.push(...arrayOfGroupsIndices);\n  } else {\n    let accumulatedWidth = 0;\n    arrayOfActionsIndices.forEach(currentActionsIndex => {\n      const currentActionsWidth = actionsWidths[currentActionsIndex];\n      if (accumulatedWidth + currentActionsWidth >= containerWidth - disclosureWidth) {\n        hiddenActions.push(currentActionsIndex);\n        return;\n      }\n      visibleActions.push(currentActionsIndex);\n      accumulatedWidth += currentActionsWidth;\n    });\n    arrayOfGroupsIndices.forEach(currentGroupsIndex => {\n      const currentActionsWidth = actionsWidths[currentGroupsIndex + actions.length];\n      if (accumulatedWidth + currentActionsWidth >= containerWidth - disclosureWidth) {\n        hiddenGroups.push(currentGroupsIndex);\n        return;\n      }\n      visibleGroups.push(currentGroupsIndex);\n      accumulatedWidth += currentActionsWidth;\n    });\n  }\n  return {\n    visibleActions,\n    hiddenActions,\n    visibleGroups,\n    hiddenGroups\n  };\n}\n\nexport { getVisibleAndHiddenActionsIndices };\n"],"mappings":"AAAA,SAASA,iCAAiCA,CAACC,OAAO,GAAG,EAAE,EAAEC,MAAM,GAAG,EAAE,EAAEC,eAAe,EAAEC,aAAa,EAAEC,cAAc,EAAE;EACpH,MAAMC,YAAY,GAAGF,aAAa,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAKD,GAAG,GAAGC,KAAK,EAAE,CAAC,CAAC;EACzE,MAAMC,qBAAqB,GAAGT,OAAO,CAACU,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAK;IACtD,OAAOA,KAAK;EACd,CAAC,CAAC;EACF,MAAMC,oBAAoB,GAAGZ,MAAM,CAACS,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAK;IACpD,OAAOA,KAAK;EACd,CAAC,CAAC;EACF,MAAME,cAAc,GAAG,EAAE;EACzB,MAAMC,aAAa,GAAG,EAAE;EACxB,MAAMC,aAAa,GAAG,EAAE;EACxB,MAAMC,YAAY,GAAG,EAAE;EACvB,IAAIb,cAAc,GAAGC,YAAY,EAAE;IACjCS,cAAc,CAACI,IAAI,CAAC,GAAGT,qBAAqB,CAAC;IAC7CO,aAAa,CAACE,IAAI,CAAC,GAAGL,oBAAoB,CAAC;EAC7C,CAAC,MAAM;IACL,IAAIM,gBAAgB,GAAG,CAAC;IACxBV,qBAAqB,CAACW,OAAO,CAACC,mBAAmB,IAAI;MACnD,MAAMC,mBAAmB,GAAGnB,aAAa,CAACkB,mBAAmB,CAAC;MAC9D,IAAIF,gBAAgB,GAAGG,mBAAmB,IAAIlB,cAAc,GAAGF,eAAe,EAAE;QAC9Ea,aAAa,CAACG,IAAI,CAACG,mBAAmB,CAAC;QACvC;MACF;MACAP,cAAc,CAACI,IAAI,CAACG,mBAAmB,CAAC;MACxCF,gBAAgB,IAAIG,mBAAmB;IACzC,CAAC,CAAC;IACFT,oBAAoB,CAACO,OAAO,CAACG,kBAAkB,IAAI;MACjD,MAAMD,mBAAmB,GAAGnB,aAAa,CAACoB,kBAAkB,GAAGvB,OAAO,CAACwB,MAAM,CAAC;MAC9E,IAAIL,gBAAgB,GAAGG,mBAAmB,IAAIlB,cAAc,GAAGF,eAAe,EAAE;QAC9Ee,YAAY,CAACC,IAAI,CAACK,kBAAkB,CAAC;QACrC;MACF;MACAP,aAAa,CAACE,IAAI,CAACK,kBAAkB,CAAC;MACtCJ,gBAAgB,IAAIG,mBAAmB;IACzC,CAAC,CAAC;EACJ;EACA,OAAO;IACLR,cAAc;IACdC,aAAa;IACbC,aAAa;IACbC;EACF,CAAC;AACH;AAEA,SAASlB,iCAAiC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}