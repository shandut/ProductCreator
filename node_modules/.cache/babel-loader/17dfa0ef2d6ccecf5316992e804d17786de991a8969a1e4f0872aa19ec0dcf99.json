{"ast":null,"code":"import React, { useState, useId, useRef, useEffect, useCallback, Children, useMemo } from 'react';\nimport { debounce } from '../../utilities/debounce.js';\nimport { useToggle } from '../../utilities/use-toggle.js';\nimport { Key } from '../../types.js';\nimport { scrollable } from '../shared.js';\nimport styles from './Listbox.css.js';\nimport { useComboboxListbox } from '../../utilities/combobox/hooks.js';\nimport { scrollOptionIntoView } from '../../utilities/listbox/utilities.js';\nimport { ListboxContext, WithinListboxContext } from '../../utilities/listbox/context.js';\nimport { TextOption } from './components/TextOption/TextOption.js';\nimport { Loading } from './components/Loading/Loading.js';\nimport { Section } from './components/Section/Section.js';\nimport { Header } from './components/Header/Header.js';\nimport { Action } from './components/Action/Action.js';\nimport { KeypressListener } from '../KeypressListener/KeypressListener.js';\nimport { Text } from '../Text/Text.js';\nimport { Option } from './components/Option/Option.js';\nlet AutoSelection = /*#__PURE__*/function (AutoSelection) {\n  AutoSelection[\"FirstSelected\"] = \"FIRST_SELECTED\";\n  AutoSelection[\"First\"] = \"FIRST\";\n  AutoSelection[\"None\"] = \"NONE\";\n  return AutoSelection;\n}({});\nconst OPTION_SELECTOR = '[data-listbox-option]';\nconst OPTION_VALUE_ATTRIBUTE = 'data-listbox-option-value';\nconst OPTION_ACTION_ATTRIBUTE = 'data-listbox-option-action';\nconst OPTION_FOCUS_ATTRIBUTE = 'data-focused';\nfunction Listbox({\n  children,\n  autoSelection = AutoSelection.FirstSelected,\n  enableKeyboardControl,\n  accessibilityLabel,\n  customListId,\n  onSelect,\n  onActiveOptionChange\n}) {\n  const [loading, setLoading] = useState();\n  const [activeOption, setActiveOption] = useState();\n  const [lazyLoading, setLazyLoading] = useState(false);\n  const [currentOptions, setCurrentOptions] = useState([]);\n  const {\n    value: keyboardEventsEnabled,\n    setTrue: enableKeyboardEvents,\n    setFalse: disableKeyboardEvents\n  } = useToggle(Boolean(enableKeyboardControl));\n  const uniqueId = useId();\n  const listId = customListId || uniqueId;\n  const scrollableRef = useRef(null);\n  const listboxRef = useRef(null);\n  const {\n    listboxId,\n    textFieldLabelId,\n    textFieldFocused,\n    willLoadMoreOptions,\n    setActiveOptionId,\n    setListboxId,\n    onOptionSelected,\n    onKeyToBottom\n  } = useComboboxListbox();\n  const inCombobox = Boolean(setActiveOptionId);\n  useEffect(() => {\n    if (setListboxId && !listboxId) {\n      setListboxId(listId);\n    }\n  }, [setListboxId, listboxId, listId]);\n  const getNavigableOptions = useCallback(() => {\n    if (!listboxRef.current) {\n      return [];\n    }\n    return [...new Set(listboxRef.current.querySelectorAll(OPTION_SELECTOR))];\n  }, []);\n  const getFirstNavigableOption = useCallback(currentOptions => {\n    const hasSelectedOptions = currentOptions.some(option => option.getAttribute('aria-selected') === 'true');\n    let elementIndex = 0;\n    const element = currentOptions.find((option, index) => {\n      const isInteractable = option.getAttribute('aria-disabled') !== 'true';\n      let isFirstNavigableOption;\n      if (hasSelectedOptions && autoSelection === AutoSelection.FirstSelected) {\n        const isSelected = option.getAttribute('aria-selected') === 'true';\n        isFirstNavigableOption = isSelected && isInteractable;\n      } else {\n        isFirstNavigableOption = isInteractable;\n      }\n      if (isFirstNavigableOption) elementIndex = index;\n      return isFirstNavigableOption;\n    });\n    if (!element) return;\n    return {\n      element,\n      index: elementIndex\n    };\n  }, [autoSelection]);\n  const handleScrollIntoView = useCallback(option => {\n    const {\n      current: scrollable\n    } = scrollableRef;\n    if (scrollable) {\n      scrollOptionIntoView(option.element, scrollable);\n    }\n  }, []);\n  const handleScrollIntoViewDebounced = debounce(handleScrollIntoView, 50);\n  const handleKeyToBottom = useCallback(() => {\n    if (onKeyToBottom) {\n      setLazyLoading(true);\n      return Promise.resolve(onKeyToBottom());\n    }\n  }, [onKeyToBottom]);\n  const handleChangeActiveOption = useCallback(nextOption => {\n    if (!nextOption) return setActiveOption(undefined);\n    activeOption?.element.removeAttribute(OPTION_FOCUS_ATTRIBUTE);\n    nextOption.element.setAttribute(OPTION_FOCUS_ATTRIBUTE, 'true');\n    handleScrollIntoViewDebounced(nextOption);\n    setActiveOption(nextOption);\n    setActiveOptionId?.(nextOption.domId);\n    onActiveOptionChange?.(nextOption.value, nextOption.domId);\n  }, [activeOption, setActiveOptionId, onActiveOptionChange, handleScrollIntoViewDebounced]);\n  const getFormattedOption = useCallback((element, index) => {\n    return {\n      element,\n      index,\n      domId: element.id,\n      value: element.getAttribute(OPTION_VALUE_ATTRIBUTE) || '',\n      disabled: element.getAttribute('aria-disabled') === 'true',\n      isAction: element.getAttribute(OPTION_ACTION_ATTRIBUTE) === 'true'\n    };\n  }, []);\n  const resetActiveOption = useCallback(() => {\n    let nextOption;\n    const nextOptions = getNavigableOptions();\n    const nextActiveOption = getFirstNavigableOption(nextOptions);\n    if (nextOptions.length === 0 && currentOptions.length > 0) {\n      setCurrentOptions(nextOptions);\n      handleChangeActiveOption();\n      return;\n    }\n    if (nextActiveOption) {\n      const {\n        element,\n        index\n      } = nextActiveOption;\n      nextOption = getFormattedOption(element, index);\n    }\n    const optionIsAlreadyActive = activeOption !== undefined && nextOption?.domId === activeOption?.domId;\n    const actionContentHasUpdated = activeOption?.isAction && nextOption?.isAction && nextOption?.value !== activeOption?.value;\n    const currentValues = currentOptions.map(option => option.getAttribute(OPTION_VALUE_ATTRIBUTE));\n    const nextValues = nextOptions.map(option => option.getAttribute(OPTION_VALUE_ATTRIBUTE));\n    const listIsUnchanged = nextValues.length === currentValues.length && nextValues.every((value, index) => {\n      return currentValues[index] === value;\n    });\n    const listIsAppended = currentValues.length !== 0 && nextValues.length > currentValues.length && currentValues.every((value, index) => {\n      return nextValues[index] === value;\n    });\n    if (listIsUnchanged) {\n      if (optionIsAlreadyActive && actionContentHasUpdated) {\n        setCurrentOptions(nextOptions);\n        handleChangeActiveOption(nextOption);\n      }\n      return;\n    }\n    if (listIsAppended) {\n      setCurrentOptions(nextOptions);\n      return;\n    }\n    setCurrentOptions(nextOptions);\n    if (lazyLoading) {\n      setLazyLoading(false);\n      return;\n    }\n    handleChangeActiveOption(nextOption);\n  }, [lazyLoading, currentOptions, activeOption, getFirstNavigableOption, getNavigableOptions, getFormattedOption, handleChangeActiveOption]);\n  useEffect(() => {\n    if (autoSelection !== AutoSelection.None && !loading && children && Children.count(children) > 0) {\n      resetActiveOption();\n    }\n  }, [children, autoSelection, activeOption, loading, resetActiveOption]);\n  useEffect(() => {\n    if (listboxRef.current) {\n      scrollableRef.current = listboxRef.current.closest(scrollable.selector);\n    }\n  }, []);\n  useEffect(() => {\n    if (enableKeyboardControl && !keyboardEventsEnabled) {\n      enableKeyboardEvents();\n    }\n  }, [enableKeyboardControl, keyboardEventsEnabled, enableKeyboardEvents]);\n  const onOptionSelect = useCallback(option => {\n    handleChangeActiveOption(option);\n    if (onOptionSelected) onOptionSelected();\n    if (onSelect) onSelect(option.value);\n  }, [handleChangeActiveOption, onSelect, onOptionSelected]);\n  const getNextIndex = useCallback((currentIndex, lastIndex, direction) => {\n    let nextIndex;\n    if (direction === 'down') {\n      if (currentIndex === lastIndex) {\n        nextIndex = willLoadMoreOptions ? currentIndex + 1 : 0;\n      } else {\n        nextIndex = currentIndex + 1;\n      }\n    } else {\n      nextIndex = currentIndex === 0 ? lastIndex : currentIndex - 1;\n    }\n    return nextIndex;\n  }, [willLoadMoreOptions]);\n  const getNextValidOption = useCallback(async key => {\n    const lastIndex = currentOptions.length - 1;\n    let currentIndex = activeOption?.index || 0;\n    let nextIndex = 0;\n    let element = activeOption?.element;\n    let totalOptions = -1;\n    if (!activeOption && autoSelection === AutoSelection.None) {\n      const nextOptions = getNavigableOptions();\n      const nextActiveOption = getFirstNavigableOption(nextOptions);\n      setCurrentOptions(nextOptions);\n      return {\n        element: nextActiveOption?.element,\n        nextIndex: nextActiveOption?.index || 0\n      };\n    }\n    while (totalOptions++ < lastIndex) {\n      nextIndex = getNextIndex(currentIndex, lastIndex, key);\n      element = currentOptions[nextIndex];\n      const triggerLazyLoad = nextIndex >= lastIndex;\n      const isDisabled = element?.getAttribute('aria-disabled') === 'true';\n      if (triggerLazyLoad && willLoadMoreOptions) {\n        await handleKeyToBottom();\n      }\n      if (isDisabled) {\n        currentIndex = nextIndex;\n        element = undefined;\n        continue;\n      }\n      break;\n    }\n    return {\n      element,\n      nextIndex\n    };\n  }, [autoSelection, currentOptions, activeOption, willLoadMoreOptions, getNextIndex, handleKeyToBottom, getFirstNavigableOption, getNavigableOptions]);\n  const handleArrow = useCallback(async (type, event) => {\n    event.preventDefault();\n    const {\n      element,\n      nextIndex\n    } = await getNextValidOption(type);\n    if (!element) return;\n    const nextOption = getFormattedOption(element, nextIndex);\n    handleChangeActiveOption(nextOption);\n  }, [getFormattedOption, getNextValidOption, handleChangeActiveOption]);\n  const handleDownArrow = useCallback(event => {\n    handleArrow('down', event);\n  }, [handleArrow]);\n  const handleUpArrow = useCallback(event => {\n    handleArrow('up', event);\n  }, [handleArrow]);\n  const handleEnter = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (activeOption) {\n      onOptionSelect(activeOption);\n    }\n  }, [activeOption, onOptionSelect]);\n  const handleFocus = useCallback(() => {\n    if (enableKeyboardControl) return;\n    enableKeyboardEvents();\n  }, [enableKeyboardControl, enableKeyboardEvents]);\n  const handleBlur = useCallback(event => {\n    event.stopPropagation();\n    if (keyboardEventsEnabled) {\n      const nextActiveOption = getFirstNavigableOption(currentOptions);\n      if (nextActiveOption) {\n        const {\n          element,\n          index\n        } = nextActiveOption;\n        const nextOption = getFormattedOption(element, index);\n        handleChangeActiveOption(nextOption);\n      }\n    }\n    if (enableKeyboardControl) return;\n    disableKeyboardEvents();\n  }, [enableKeyboardControl, currentOptions, keyboardEventsEnabled, disableKeyboardEvents, getFirstNavigableOption, getFormattedOption, handleChangeActiveOption]);\n  const listeners = keyboardEventsEnabled || textFieldFocused ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.DownArrow,\n    handler: handleDownArrow\n  }), /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.UpArrow,\n    handler: handleUpArrow\n  }), /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.Enter,\n    handler: handleEnter\n  })) : null;\n  const listboxContext = useMemo(() => ({\n    onOptionSelect,\n    setLoading\n  }), [onOptionSelect]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, listeners, /*#__PURE__*/React.createElement(Text, {\n    as: \"span\",\n    visuallyHidden: true\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-live\": \"polite\"\n  }, loading ? loading : null)), /*#__PURE__*/React.createElement(ListboxContext.Provider, {\n    value: listboxContext\n  }, /*#__PURE__*/React.createElement(WithinListboxContext.Provider, {\n    value: true\n  }, children ? /*#__PURE__*/React.createElement(\"ul\", {\n    tabIndex: 0,\n    role: \"listbox\",\n    className: styles.Listbox,\n    \"aria-label\": inCombobox ? undefined : accessibilityLabel,\n    \"aria-labelledby\": textFieldLabelId,\n    \"aria-busy\": Boolean(loading),\n    \"aria-activedescendant\": activeOption && activeOption.domId,\n    id: listId,\n    onFocus: inCombobox ? undefined : handleFocus,\n    onBlur: inCombobox ? undefined : handleBlur,\n    ref: listboxRef\n  }, children) : null)));\n}\nListbox.Option = Option;\nListbox.TextOption = TextOption;\nListbox.Loading = Loading;\nListbox.Section = Section;\nListbox.Header = Header;\nListbox.Action = Action;\nexport { AutoSelection, Listbox };","map":{"version":3,"names":["React","useState","useId","useRef","useEffect","useCallback","Children","useMemo","debounce","useToggle","Key","scrollable","styles","useComboboxListbox","scrollOptionIntoView","ListboxContext","WithinListboxContext","TextOption","Loading","Section","Header","Action","KeypressListener","Text","Option","AutoSelection","OPTION_SELECTOR","OPTION_VALUE_ATTRIBUTE","OPTION_ACTION_ATTRIBUTE","OPTION_FOCUS_ATTRIBUTE","Listbox","children","autoSelection","FirstSelected","enableKeyboardControl","accessibilityLabel","customListId","onSelect","onActiveOptionChange","loading","setLoading","activeOption","setActiveOption","lazyLoading","setLazyLoading","currentOptions","setCurrentOptions","value","keyboardEventsEnabled","setTrue","enableKeyboardEvents","setFalse","disableKeyboardEvents","Boolean","uniqueId","listId","scrollableRef","listboxRef","listboxId","textFieldLabelId","textFieldFocused","willLoadMoreOptions","setActiveOptionId","setListboxId","onOptionSelected","onKeyToBottom","inCombobox","getNavigableOptions","current","Set","querySelectorAll","getFirstNavigableOption","hasSelectedOptions","some","option","getAttribute","elementIndex","element","find","index","isInteractable","isFirstNavigableOption","isSelected","handleScrollIntoView","handleScrollIntoViewDebounced","handleKeyToBottom","Promise","resolve","handleChangeActiveOption","nextOption","undefined","removeAttribute","setAttribute","domId","getFormattedOption","id","disabled","isAction","resetActiveOption","nextOptions","nextActiveOption","length","optionIsAlreadyActive","actionContentHasUpdated","currentValues","map","nextValues","listIsUnchanged","every","listIsAppended","None","count","closest","selector","onOptionSelect","getNextIndex","currentIndex","lastIndex","direction","nextIndex","getNextValidOption","key","totalOptions","triggerLazyLoad","isDisabled","handleArrow","type","event","preventDefault","handleDownArrow","handleUpArrow","handleEnter","stopPropagation","handleFocus","handleBlur","listeners","createElement","Fragment","keyEvent","keyCode","DownArrow","handler","UpArrow","Enter","listboxContext","as","visuallyHidden","Provider","tabIndex","role","className","onFocus","onBlur","ref"],"sources":["/Users/shannondutton/Documents/Code Projects/ProductCreator/node_modules/@shopify/polaris/build/esm/components/Listbox/Listbox.js"],"sourcesContent":["import React, { useState, useId, useRef, useEffect, useCallback, Children, useMemo } from 'react';\nimport { debounce } from '../../utilities/debounce.js';\nimport { useToggle } from '../../utilities/use-toggle.js';\nimport { Key } from '../../types.js';\nimport { scrollable } from '../shared.js';\nimport styles from './Listbox.css.js';\nimport { useComboboxListbox } from '../../utilities/combobox/hooks.js';\nimport { scrollOptionIntoView } from '../../utilities/listbox/utilities.js';\nimport { ListboxContext, WithinListboxContext } from '../../utilities/listbox/context.js';\nimport { TextOption } from './components/TextOption/TextOption.js';\nimport { Loading } from './components/Loading/Loading.js';\nimport { Section } from './components/Section/Section.js';\nimport { Header } from './components/Header/Header.js';\nimport { Action } from './components/Action/Action.js';\nimport { KeypressListener } from '../KeypressListener/KeypressListener.js';\nimport { Text } from '../Text/Text.js';\nimport { Option } from './components/Option/Option.js';\n\nlet AutoSelection = /*#__PURE__*/function (AutoSelection) {\n  AutoSelection[\"FirstSelected\"] = \"FIRST_SELECTED\";\n  AutoSelection[\"First\"] = \"FIRST\";\n  AutoSelection[\"None\"] = \"NONE\";\n  return AutoSelection;\n}({});\nconst OPTION_SELECTOR = '[data-listbox-option]';\nconst OPTION_VALUE_ATTRIBUTE = 'data-listbox-option-value';\nconst OPTION_ACTION_ATTRIBUTE = 'data-listbox-option-action';\nconst OPTION_FOCUS_ATTRIBUTE = 'data-focused';\nfunction Listbox({\n  children,\n  autoSelection = AutoSelection.FirstSelected,\n  enableKeyboardControl,\n  accessibilityLabel,\n  customListId,\n  onSelect,\n  onActiveOptionChange\n}) {\n  const [loading, setLoading] = useState();\n  const [activeOption, setActiveOption] = useState();\n  const [lazyLoading, setLazyLoading] = useState(false);\n  const [currentOptions, setCurrentOptions] = useState([]);\n  const {\n    value: keyboardEventsEnabled,\n    setTrue: enableKeyboardEvents,\n    setFalse: disableKeyboardEvents\n  } = useToggle(Boolean(enableKeyboardControl));\n  const uniqueId = useId();\n  const listId = customListId || uniqueId;\n  const scrollableRef = useRef(null);\n  const listboxRef = useRef(null);\n  const {\n    listboxId,\n    textFieldLabelId,\n    textFieldFocused,\n    willLoadMoreOptions,\n    setActiveOptionId,\n    setListboxId,\n    onOptionSelected,\n    onKeyToBottom\n  } = useComboboxListbox();\n  const inCombobox = Boolean(setActiveOptionId);\n  useEffect(() => {\n    if (setListboxId && !listboxId) {\n      setListboxId(listId);\n    }\n  }, [setListboxId, listboxId, listId]);\n  const getNavigableOptions = useCallback(() => {\n    if (!listboxRef.current) {\n      return [];\n    }\n    return [...new Set(listboxRef.current.querySelectorAll(OPTION_SELECTOR))];\n  }, []);\n  const getFirstNavigableOption = useCallback(currentOptions => {\n    const hasSelectedOptions = currentOptions.some(option => option.getAttribute('aria-selected') === 'true');\n    let elementIndex = 0;\n    const element = currentOptions.find((option, index) => {\n      const isInteractable = option.getAttribute('aria-disabled') !== 'true';\n      let isFirstNavigableOption;\n      if (hasSelectedOptions && autoSelection === AutoSelection.FirstSelected) {\n        const isSelected = option.getAttribute('aria-selected') === 'true';\n        isFirstNavigableOption = isSelected && isInteractable;\n      } else {\n        isFirstNavigableOption = isInteractable;\n      }\n      if (isFirstNavigableOption) elementIndex = index;\n      return isFirstNavigableOption;\n    });\n    if (!element) return;\n    return {\n      element,\n      index: elementIndex\n    };\n  }, [autoSelection]);\n  const handleScrollIntoView = useCallback(option => {\n    const {\n      current: scrollable\n    } = scrollableRef;\n    if (scrollable) {\n      scrollOptionIntoView(option.element, scrollable);\n    }\n  }, []);\n  const handleScrollIntoViewDebounced = debounce(handleScrollIntoView, 50);\n  const handleKeyToBottom = useCallback(() => {\n    if (onKeyToBottom) {\n      setLazyLoading(true);\n      return Promise.resolve(onKeyToBottom());\n    }\n  }, [onKeyToBottom]);\n  const handleChangeActiveOption = useCallback(nextOption => {\n    if (!nextOption) return setActiveOption(undefined);\n    activeOption?.element.removeAttribute(OPTION_FOCUS_ATTRIBUTE);\n    nextOption.element.setAttribute(OPTION_FOCUS_ATTRIBUTE, 'true');\n    handleScrollIntoViewDebounced(nextOption);\n    setActiveOption(nextOption);\n    setActiveOptionId?.(nextOption.domId);\n    onActiveOptionChange?.(nextOption.value, nextOption.domId);\n  }, [activeOption, setActiveOptionId, onActiveOptionChange, handleScrollIntoViewDebounced]);\n  const getFormattedOption = useCallback((element, index) => {\n    return {\n      element,\n      index,\n      domId: element.id,\n      value: element.getAttribute(OPTION_VALUE_ATTRIBUTE) || '',\n      disabled: element.getAttribute('aria-disabled') === 'true',\n      isAction: element.getAttribute(OPTION_ACTION_ATTRIBUTE) === 'true'\n    };\n  }, []);\n  const resetActiveOption = useCallback(() => {\n    let nextOption;\n    const nextOptions = getNavigableOptions();\n    const nextActiveOption = getFirstNavigableOption(nextOptions);\n    if (nextOptions.length === 0 && currentOptions.length > 0) {\n      setCurrentOptions(nextOptions);\n      handleChangeActiveOption();\n      return;\n    }\n    if (nextActiveOption) {\n      const {\n        element,\n        index\n      } = nextActiveOption;\n      nextOption = getFormattedOption(element, index);\n    }\n    const optionIsAlreadyActive = activeOption !== undefined && nextOption?.domId === activeOption?.domId;\n    const actionContentHasUpdated = activeOption?.isAction && nextOption?.isAction && nextOption?.value !== activeOption?.value;\n    const currentValues = currentOptions.map(option => option.getAttribute(OPTION_VALUE_ATTRIBUTE));\n    const nextValues = nextOptions.map(option => option.getAttribute(OPTION_VALUE_ATTRIBUTE));\n    const listIsUnchanged = nextValues.length === currentValues.length && nextValues.every((value, index) => {\n      return currentValues[index] === value;\n    });\n    const listIsAppended = currentValues.length !== 0 && nextValues.length > currentValues.length && currentValues.every((value, index) => {\n      return nextValues[index] === value;\n    });\n    if (listIsUnchanged) {\n      if (optionIsAlreadyActive && actionContentHasUpdated) {\n        setCurrentOptions(nextOptions);\n        handleChangeActiveOption(nextOption);\n      }\n      return;\n    }\n    if (listIsAppended) {\n      setCurrentOptions(nextOptions);\n      return;\n    }\n    setCurrentOptions(nextOptions);\n    if (lazyLoading) {\n      setLazyLoading(false);\n      return;\n    }\n    handleChangeActiveOption(nextOption);\n  }, [lazyLoading, currentOptions, activeOption, getFirstNavigableOption, getNavigableOptions, getFormattedOption, handleChangeActiveOption]);\n  useEffect(() => {\n    if (autoSelection !== AutoSelection.None && !loading && children && Children.count(children) > 0) {\n      resetActiveOption();\n    }\n  }, [children, autoSelection, activeOption, loading, resetActiveOption]);\n  useEffect(() => {\n    if (listboxRef.current) {\n      scrollableRef.current = listboxRef.current.closest(scrollable.selector);\n    }\n  }, []);\n  useEffect(() => {\n    if (enableKeyboardControl && !keyboardEventsEnabled) {\n      enableKeyboardEvents();\n    }\n  }, [enableKeyboardControl, keyboardEventsEnabled, enableKeyboardEvents]);\n  const onOptionSelect = useCallback(option => {\n    handleChangeActiveOption(option);\n    if (onOptionSelected) onOptionSelected();\n    if (onSelect) onSelect(option.value);\n  }, [handleChangeActiveOption, onSelect, onOptionSelected]);\n  const getNextIndex = useCallback((currentIndex, lastIndex, direction) => {\n    let nextIndex;\n    if (direction === 'down') {\n      if (currentIndex === lastIndex) {\n        nextIndex = willLoadMoreOptions ? currentIndex + 1 : 0;\n      } else {\n        nextIndex = currentIndex + 1;\n      }\n    } else {\n      nextIndex = currentIndex === 0 ? lastIndex : currentIndex - 1;\n    }\n    return nextIndex;\n  }, [willLoadMoreOptions]);\n  const getNextValidOption = useCallback(async key => {\n    const lastIndex = currentOptions.length - 1;\n    let currentIndex = activeOption?.index || 0;\n    let nextIndex = 0;\n    let element = activeOption?.element;\n    let totalOptions = -1;\n    if (!activeOption && autoSelection === AutoSelection.None) {\n      const nextOptions = getNavigableOptions();\n      const nextActiveOption = getFirstNavigableOption(nextOptions);\n      setCurrentOptions(nextOptions);\n      return {\n        element: nextActiveOption?.element,\n        nextIndex: nextActiveOption?.index || 0\n      };\n    }\n    while (totalOptions++ < lastIndex) {\n      nextIndex = getNextIndex(currentIndex, lastIndex, key);\n      element = currentOptions[nextIndex];\n      const triggerLazyLoad = nextIndex >= lastIndex;\n      const isDisabled = element?.getAttribute('aria-disabled') === 'true';\n      if (triggerLazyLoad && willLoadMoreOptions) {\n        await handleKeyToBottom();\n      }\n      if (isDisabled) {\n        currentIndex = nextIndex;\n        element = undefined;\n        continue;\n      }\n      break;\n    }\n    return {\n      element,\n      nextIndex\n    };\n  }, [autoSelection, currentOptions, activeOption, willLoadMoreOptions, getNextIndex, handleKeyToBottom, getFirstNavigableOption, getNavigableOptions]);\n  const handleArrow = useCallback(async (type, event) => {\n    event.preventDefault();\n    const {\n      element,\n      nextIndex\n    } = await getNextValidOption(type);\n    if (!element) return;\n    const nextOption = getFormattedOption(element, nextIndex);\n    handleChangeActiveOption(nextOption);\n  }, [getFormattedOption, getNextValidOption, handleChangeActiveOption]);\n  const handleDownArrow = useCallback(event => {\n    handleArrow('down', event);\n  }, [handleArrow]);\n  const handleUpArrow = useCallback(event => {\n    handleArrow('up', event);\n  }, [handleArrow]);\n  const handleEnter = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (activeOption) {\n      onOptionSelect(activeOption);\n    }\n  }, [activeOption, onOptionSelect]);\n  const handleFocus = useCallback(() => {\n    if (enableKeyboardControl) return;\n    enableKeyboardEvents();\n  }, [enableKeyboardControl, enableKeyboardEvents]);\n  const handleBlur = useCallback(event => {\n    event.stopPropagation();\n    if (keyboardEventsEnabled) {\n      const nextActiveOption = getFirstNavigableOption(currentOptions);\n      if (nextActiveOption) {\n        const {\n          element,\n          index\n        } = nextActiveOption;\n        const nextOption = getFormattedOption(element, index);\n        handleChangeActiveOption(nextOption);\n      }\n    }\n    if (enableKeyboardControl) return;\n    disableKeyboardEvents();\n  }, [enableKeyboardControl, currentOptions, keyboardEventsEnabled, disableKeyboardEvents, getFirstNavigableOption, getFormattedOption, handleChangeActiveOption]);\n  const listeners = keyboardEventsEnabled || textFieldFocused ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.DownArrow,\n    handler: handleDownArrow\n  }), /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.UpArrow,\n    handler: handleUpArrow\n  }), /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.Enter,\n    handler: handleEnter\n  })) : null;\n  const listboxContext = useMemo(() => ({\n    onOptionSelect,\n    setLoading\n  }), [onOptionSelect]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, listeners, /*#__PURE__*/React.createElement(Text, {\n    as: \"span\",\n    visuallyHidden: true\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-live\": \"polite\"\n  }, loading ? loading : null)), /*#__PURE__*/React.createElement(ListboxContext.Provider, {\n    value: listboxContext\n  }, /*#__PURE__*/React.createElement(WithinListboxContext.Provider, {\n    value: true\n  }, children ? /*#__PURE__*/React.createElement(\"ul\", {\n    tabIndex: 0,\n    role: \"listbox\",\n    className: styles.Listbox,\n    \"aria-label\": inCombobox ? undefined : accessibilityLabel,\n    \"aria-labelledby\": textFieldLabelId,\n    \"aria-busy\": Boolean(loading),\n    \"aria-activedescendant\": activeOption && activeOption.domId,\n    id: listId,\n    onFocus: inCombobox ? undefined : handleFocus,\n    onBlur: inCombobox ? undefined : handleBlur,\n    ref: listboxRef\n  }, children) : null)));\n}\nListbox.Option = Option;\nListbox.TextOption = TextOption;\nListbox.Loading = Loading;\nListbox.Section = Section;\nListbox.Header = Header;\nListbox.Action = Action;\n\nexport { AutoSelection, Listbox };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}